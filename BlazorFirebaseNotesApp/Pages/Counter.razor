@page "/counter"
@inject Services.FirebaseService FirebaseService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveWebAssembly

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

@if (isLoading)
{
    <p><em>Loading your count from the cloud...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
}

@code {
    private int currentCount;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentCount = await FirebaseService.GetUserCountAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading count: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task IncrementCount()
    {
        // First, update the UI for a snappy feel (optimistic update)
        currentCount++;

        try
        {
            // Then, save the new value to the database
            await FirebaseService.SetUserCountAsync(currentCount);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving count: {ex.Message}";
            // Optional: Roll back the change if the save fails
            currentCount--;
        }
    }
}
