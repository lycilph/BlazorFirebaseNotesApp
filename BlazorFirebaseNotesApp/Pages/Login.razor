@page "/login"
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Services.FirebaseAuthStateProvider authStateProvider

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<div class="card" @onkeydown="HandleKeyDown">
    <div class="card-body">
        <div class="form-group">
            <label>Email address</label>
            <input class="form-control" @bind="email" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <input type="password" class="form-control" @bind="password" />
        </div>
        <button class="btn btn-primary mt-3" @onclick="HandleLogin">Login</button>
        <button class="btn btn-secondary mt-3" @onclick="HandleSignUp">Sign Up</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private string email;
    private string password;
    private string errorMessage;

    // This property will be populated from the URL, e.g., /login?returnUrl=%2F
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; }

    // This is the new method that handles the key press
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // Check if the key pressed was "Enter"
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(email) && !string.IsNullOrWhiteSpace(password))
        {
            // If so, call the HandleLogin method
            await HandleLogin();
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await AuthService.LoginAsync(email, password);
            if (!string.IsNullOrEmpty(response?.idToken))
            {
                await localStorage.SetItemAsync("authToken", response.idToken);
                authStateProvider.NotifyUserAuthentication(response.idToken);
                // THE FIX: Wait for the next UI render cycle before navigating.
                // This gives the AuthorizeRouteView time to recognize the new auth state.
                await Task.Yield();
                // Navigate to the return URL if it exists, otherwise to the home page.
                NavigationManager.NavigateTo(ReturnUrl ?? "", forceLoad: false);
            }
            else
            {
                errorMessage = "Authentication failed. Please check your credentials or the email may be in use.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task HandleSignUp()
    {
        errorMessage = string.Empty;
        try
        {
            // STEP 1: Sign up and get the initial token and the crucial refresh token.
            var initialResponse = await AuthService.SignUpAsync(email, password);
            if (initialResponse == null || string.IsNullOrEmpty(initialResponse.refreshToken))
            {
                errorMessage = "Sign up failed. The email may already be in use.";
                return;
            }
            
            // STEP 2: Update the profile. We fire-and-forget this, trusting it works on the backend.
            // We do NOT use the response from this call.
            var name = email.Split('@').First();
            await AuthService.UpdateProfileAsync(initialResponse.idToken, name);
            
            // STEP 3: Refresh the token. This is where we get our "golden" token with the name.
            var finalTokenResponse = await AuthService.RefreshTokenAsync(initialResponse.refreshToken);
            if (finalTokenResponse == null || string.IsNullOrEmpty(finalTokenResponse.IdToken))
            {
                errorMessage = "Could not finalize sign up. Please try logging in.";
                return;
            }

            // Send verification email using the final, most powerful token.
            await AuthService.SendVerificationEmailAsync(finalTokenResponse.IdToken);

            // Now, save the FINAL token and proceed.
            await localStorage.SetItemAsync("authToken", finalTokenResponse.IdToken);
            authStateProvider.NotifyUserAuthentication(finalTokenResponse.IdToken);
            await Task.Yield();
            NavigationManager.NavigateTo(ReturnUrl ?? "", forceLoad: false);

            // var response = await AuthService.SignUpAsync(email, password);
            // if (!string.IsNullOrEmpty(response?.idToken))
            // {
            //     // Sign up was successful, now send the verification email
            //     await AuthService.SendVerificationEmailAsync(response.idToken);

            //     // Also update the name
            //     var name = email.Split('@').First();
            //     var updateResponse = await AuthService.UpdateProfileAsync(response.idToken, name);

            //     // Now proceed with the normal login flow
            //     await localStorage.SetItemAsync("authToken", response.idToken);
            //     authStateProvider.NotifyUserAuthentication(response.idToken);
            //     await Task.Yield();
            //     NavigationManager.NavigateTo(ReturnUrl ?? "", forceLoad: false);
            // }
            // else
            // {
            //     errorMessage = "Sign up failed. The email may already be in use.";
            // }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}